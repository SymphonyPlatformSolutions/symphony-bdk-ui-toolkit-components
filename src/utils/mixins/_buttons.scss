/* Define color on current text and eventual font icons */
@mixin addFontIconColor($fontColor) {
  // Icon styling selector takes precendence over the button colors
  &,
  i {
    color: $fontColor;
  }
}
@mixin addIconSize($size) {
  &,
  i {
    font-size: toRem($size);
  }
}

@mixin focus-visible($colorMap, $insetShadow: false) {
  &:focus-visible {
    background-color: map-get($colorMap, focus);
    color: map-get($colorMap, focusText);
    outline: 0;
    @if $insetShadow {
      box-shadow: inset 0 0 0 toRem(2) map-get($colorMap, focusText),
        0 0 0 toRem(1) $--tk-button-focus-shadow,
        0 0 0 toRem(3) #{getColor($electricity, '40')};
    } @else {
      box-shadow: 0 0 0 toRem(1) $--tk-button-focus-shadow,
        0 0 0 toRem(3) #{getColor($electricity, '40')};
    }
  }
}

/* Applies color styles to filled buttons, buttons that do not have borders */
@mixin styleFilledButton($colorMap) {
  background-color: map-get($colorMap, default);
  color: map-get($colorMap, text);
  &:hover {
    background-color: map-get($colorMap, hover);
    color: map-get($colorMap, hoverText);
    .tk-button-icon--loading {
      color: map-get($colorMap, hoverText);
    }
  }
  &:active {
    background-color: map-get($colorMap, active);
    color: map-get($colorMap, activeText);
    .tk-button-icon--loading {
      color: map-get($colorMap, activeText);
    }
  }
  &:disabled {
    background-color: map-get($colorMap, disabled);
    color: map-get($colorMap, textDisabled);
    .tk-button-icon--loading {
      color: map-get($colorMap, textDisabled);
    }
  }
  &:disabled.loading {
    background-color: map-get($colorMap, default);
  }
  &.loading {
    color: map-get($colorMap, text);
    .tk-button-icon--loading {
      color: map-get($colorMap, text);
    }
  }
  @include focus-visible($colorMap);
}

/* Applies color styles to outline buttons, buttons that do not have a background */
@mixin styleOutlinedButton($colorMap) {
  background-color: transparent;
  color: map-get($colorMap, default);
  @include addBorder(toRem(2), map-get($colorMap, default));
  &:hover {
    background-color: map-get($colorMap, hover);
    color: map-get($colorMap, hoverText);
    @include addBorder(toRem(2), map-get($colorMap, hoverText));
    .tk-button-icon--loading {
      color: map-get($colorMap, hoverText);
    }
  }
  &:active {
    background-color: map-get($colorMap, active);
    color: map-get($colorMap, activeText);
    @include addBorder(toRem(2), map-get($colorMap, activeText));
    .tk-button-icon--loading {
      color: map-get($colorMap, activeText);
    }
  }
  &:disabled {
    background-color: transparent;
    color: map-get($colorMap, textDisabled);
    @include addBorder(toRem(2), map-get($colorMap, disabled));
    .tk-button-icon--loading {
      color: map-get($colorMap, textDisabled);
    }
  }
  &.loading {
    color: map-get($colorMap, text);
    @include addBorder(toRem(2), map-get($colorMap, default));
    .tk-button-icon--loading {
      color: map-get($colorMap, text);
    }
  }
  @include focus-visible($colorMap, true);
}
